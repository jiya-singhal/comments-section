{"version":3,"sources":["components/CommentForm/CommentForm.js","components/Comment/Comment.js","components/CommentList/CommentList.js","App.js","reportWebVitals.js","index.js"],"names":["CommentForm","_ref","onAddComment","parentId","isReply","onAddReply","name","setName","useState","text","setText","error","setError","React","createElement","className","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","Comment","comment","onEditComment","onDeleteComment","isEditing","setIsEditing","editText","setEditText","onClick","FaTrash","date","handleEdit","replies","map","reply","key","CommentList","comments","App","setComments","useEffect","savedComments","JSON","parse","localStorage","getItem","setItem","stringify","addComment","newComment","Date","now","toLocaleString","addReply","commentId","newReply","editComment","replyId","deleteComment","filter","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.042c5e58.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './CommentForm.css'; // Note the relative path\n\n\nfunction CommentForm({ onAddComment, parentId, isReply, onAddReply }) {\n    const [name, setName] = useState('');\n    const [text, setText] = useState('');\n    const [error, setError] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!name || !text) {\n            setError('Both fields are required.');\n            return;\n        }\n        setError('');\n        if (isReply) {\n            onAddReply(parentId, name, text);\n        } else {\n            onAddComment(name, text);\n        }\n        setName('');\n        setText('');\n    };\n\n    return (\n        <form className=\"comment-form\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"name\">Name</label>\n                <input \n                    type=\"text\" \n                    id=\"name\"\n                    placeholder=\"Name\" \n                    value={name} \n                    onChange={(e) => setName(e.target.value)} \n                />\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"comment\">Comment</label>\n                <textarea \n                    id=\"comment\"\n                    placeholder=\"Comment\" \n                    value={text} \n                    onChange={(e) => setText(e.target.value)} \n                />\n            </div>\n            {error && <p className=\"error-message\">{error}</p>}\n            <button type=\"submit\" className=\"submit-button\">Submit</button>\n        </form>\n    );\n}\n\nexport default CommentForm;\n","import React, { useState } from 'react';\nimport './Comment.css'; \nimport CommentForm from '../CommentForm/CommentForm';\nimport { FaTrash } from 'react-icons/fa'; // Import the delete icon from react-icons\n\nfunction Comment({ comment, onAddReply, onEditComment, onDeleteComment }) {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editText, setEditText] = useState(comment.text);\n\n    const handleEdit = () => {\n        setIsEditing(!isEditing);\n        if (isEditing) {\n            onEditComment(comment.id, editText, false);\n        }\n    };\n\n    return (\n        <div className=\"comment-container\">\n            <div className=\"comment-header\">\n                <strong>{comment.name}</strong>\n                <button className=\"delete-button\" onClick={() => onDeleteComment(comment.id, false)}>\n                    <FaTrash /> {/* FontAwesome trash icon */}\n                </button>\n            </div>\n            {isEditing ? (\n                <textarea\n                    className=\"comment-edit\"\n                    value={editText}\n                    onChange={(e) => setEditText(e.target.value)}\n                />\n            ) : (\n                <p className=\"comment-text\">{comment.text}</p>\n            )}\n            <p className=\"comment-date\">{comment.date}</p>\n            <div className=\"comment-buttons\">\n                <button className=\"edit-button\" onClick={handleEdit}>\n                    {isEditing ? 'Save' : 'Edit'}\n                </button>\n            </div>\n            <CommentForm onAddReply={onAddReply} parentId={comment.id} isReply={true} />\n            <div>\n                {comment.replies.map(reply => (\n                    <div key={reply.id} className=\"reply-container\">\n                        <div className=\"reply-header\">\n                            <strong>{reply.name}</strong>\n                            <button className=\"delete-button\" onClick={() => onDeleteComment(comment.id, true, reply.id)}>\n                                <FaTrash /> {/* FontAwesome trash icon */}\n                            </button>\n                        </div>\n                        <p className=\"reply-text\">{reply.text}</p>\n                        <p className=\"reply-date\">{reply.date}</p>\n                        <div className=\"reply-buttons\">\n                            <button className=\"edit-button\" onClick={() => onEditComment(comment.id, reply.text, true, reply.id)}>\n                                Edit\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Comment;\n","import React from 'react';\nimport Comment from '../Comment/Comment';\n\nfunction CommentList({ comments, onAddReply, onEditComment, onDeleteComment }) {\n    return (\n        <div>\n            {comments.map(comment => (\n                <Comment \n                    key={comment.id} \n                    comment={comment} \n                    onAddReply={onAddReply} \n                    onEditComment={onEditComment} \n                    onDeleteComment={onDeleteComment} \n                />\n            ))}\n        </div>\n    );\n}\n\nexport default CommentList;\n","import React, { useEffect, useState } from 'react';\nimport CommentForm from './components/CommentForm/CommentForm';\nimport CommentList from './components/CommentList/CommentList';\n\nfunction App() {\n    const [comments, setComments] = useState([]);\n\n    useEffect(() => {\n        const savedComments = JSON.parse(localStorage.getItem('comments'));\n        if (savedComments) {\n            setComments(savedComments);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('comments', JSON.stringify(comments));\n    }, [comments]);\n\n    const addComment = (name, text) => {\n        const newComment = {\n            id: Date.now(),\n            name,\n            text,\n            date: new Date().toLocaleString(),\n            replies: []\n        };\n        setComments([...comments, newComment]);\n    };\n\n    const addReply = (commentId, name, text) => {\n        const newReply = {\n            id: Date.now(),\n            name,\n            text,\n            date: new Date().toLocaleString()\n        };\n        setComments(comments.map(comment => \n            comment.id === commentId ? {...comment, replies: [...comment.replies, newReply]} : comment\n        ));\n    };\n\n    const editComment = (commentId, text, isReply, replyId) => {\n        if (isReply) {\n            setComments(comments.map(comment =>\n                comment.id === commentId ? {\n                    ...comment,\n                    replies: comment.replies.map(reply =>\n                        reply.id === replyId ? { ...reply, text } : reply\n                    )\n                } : comment\n            ));\n        } else {\n            setComments(comments.map(comment =>\n                comment.id === commentId ? { ...comment, text } : comment\n            ));\n        }\n    };\n\n    const deleteComment = (commentId, isReply, replyId) => {\n        if (isReply) {\n            setComments(comments.map(comment =>\n                comment.id === commentId ? {\n                    ...comment,\n                    replies: comment.replies.filter(reply => reply.id !== replyId)\n                } : comment\n            ));\n        } else {\n            setComments(comments.filter(comment => comment.id !== commentId));\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Comments Section</h1>\n            <CommentForm onAddComment={addComment} />\n            <CommentList \n                comments={comments} \n                onAddReply={addReply} \n                onEditComment={editComment} \n                onDeleteComment={deleteComment} \n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}